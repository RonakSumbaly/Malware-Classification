import os, shutil
import csv
from collections import Counter
from config import conf

# get class labels from csv file
def getClassLabels():
    reader = csv.reader(open(conf['train']['labels']))
    trainLabels = {}

    for row in reader:
        key = row[0]
        if key in trainLabels:
            pass
        trainLabels[key] = row[1]

    return trainLabels

# count occurrence of various classes
def countOfFiles(trainLabels):
    return dict(Counter(trainLabels.values()))

# half file count to separate training and testing evenly
def halfFilesCount(fileCount):
    for keys in fileCount.keys():
        fileCount[keys] /= 2

    return fileCount

# get list of file names for training and testing data
def getTrainingFilesName(labels, fileCount):
    trainLabels = []
    testLabels = []
    for keys in labels.keys():
        fileClass = labels[keys]
        if fileCount[fileClass] > 0:
            trainLabels.append(keys)
            fileCount[fileClass] -= 1
        else:
            testLabels.append(keys)

    return trainLabels,testLabels

# make testing and training data
def makeDataFolders():
    if not os.path.exists(conf['train']['file_loc']):
        os.makedirs(conf['train']['file_loc'])

    if not os.path.exists(conf['test']['file_loc']):
        os.makedirs(conf['test']['file_loc'])

# separate data files
def separateDataFiles(trainLabels, testLabels):
    for i in os.listdir(conf['sample']['file_loc']):
        fileName = i.split(".")[0]
        if fileName in trainLabels:
            shutil.move(os.path.join(conf['sample']['file_loc'],i),os.path.join(conf['train']['file_loc'], i))
        elif fileName in testLabels:
            shutil.move(os.path.join(conf['sample']['file_loc'],i),os.path.join(conf['test']['file_loc'], i))

# output train & test file names
def outputCSV(trainLabels, testLabels):
    trainFile = open(conf['train']['file_names'], 'w+')
    testFile = open(conf['test']['file_names'], 'w+')

    tr = csv.writer(trainFile, quoting=csv.QUOTE_ALL)
    te = csv.writer(testFile, quoting=csv.QUOTE_ALL)

    tr.writerow(trainLabels)
    te.writerow(testLabels)

if __name__ == '__main__':
    makeDataFolders()
    labels = getClassLabels()
    fileCount = halfFilesCount(countOfFiles(labels))
    trainLabels, testLabels = getTrainingFilesName(labels, fileCount)
    outputCSV(trainLabels, testLabels)
    separateDataFiles(trainLabels, testLabels)
